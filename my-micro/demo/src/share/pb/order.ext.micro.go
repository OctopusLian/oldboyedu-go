// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order.ext.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderServiceExt service

type OrderServiceExtService interface {
	// 想看
	WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error)
	// 下单
	Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error)
	// 支付
	PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error)
	// 取消订单
	UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error)
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error)
	// 查看所有电影票
	LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error)
	// 查看所有看过的电影票
	LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error)
	// 进行评分
	OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error)
}

type orderServiceExtService struct {
	c    client.Client
	name string
}

func NewOrderServiceExtService(name string, c client.Client) OrderServiceExtService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &orderServiceExtService{
		c:    c,
		name: name,
	}
}

func (c *orderServiceExtService) WantTicket(ctx context.Context, in *WantTicketReq, opts ...client.CallOption) (*WantTicketRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.WantTicket", in)
	out := new(WantTicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) Ticket(ctx context.Context, in *TicketReq, opts ...client.CallOption) (*TicketRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.Ticket", in)
	out := new(TicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) PayOrder(ctx context.Context, in *PayOrderReq, opts ...client.CallOption) (*PayOrderRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.PayOrder", in)
	out := new(PayOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) UndoOrder(ctx context.Context, in *UndoOrderReq, opts ...client.CallOption) (*UndoOrderRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.UndoOrder", in)
	out := new(UndoOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, opts ...client.CallOption) (*GetOrderMessageRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.GetOrderMessage", in)
	out := new(GetOrderMessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) LookOrders(ctx context.Context, in *LookOrdersReq, opts ...client.CallOption) (*LookOrdersRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.LookOrders", in)
	out := new(LookOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, opts ...client.CallOption) (*LookAlreadyOrdersRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.LookAlreadyOrders", in)
	out := new(LookAlreadyOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceExtService) OrderComment(ctx context.Context, in *OrderCommentReq, opts ...client.CallOption) (*OrderCommentRsp, error) {
	req := c.c.NewRequest(c.name, "OrderServiceExt.OrderComment", in)
	out := new(OrderCommentRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderServiceExt service

type OrderServiceExtHandler interface {
	// 想看
	WantTicket(context.Context, *WantTicketReq, *WantTicketRsp) error
	// 下单
	Ticket(context.Context, *TicketReq, *TicketRsp) error
	// 支付
	PayOrder(context.Context, *PayOrderReq, *PayOrderRsp) error
	// 取消订单
	UndoOrder(context.Context, *UndoOrderReq, *UndoOrderRsp) error
	// 根据订单编号获取电影票具体信息
	GetOrderMessage(context.Context, *GetOrderMessageReq, *GetOrderMessageRsp) error
	// 查看所有电影票
	LookOrders(context.Context, *LookOrdersReq, *LookOrdersRsp) error
	// 查看所有看过的电影票
	LookAlreadyOrders(context.Context, *LookAlreadyOrdersReq, *LookAlreadyOrdersRsp) error
	// 进行评分
	OrderComment(context.Context, *OrderCommentReq, *OrderCommentRsp) error
}

func RegisterOrderServiceExtHandler(s server.Server, hdlr OrderServiceExtHandler, opts ...server.HandlerOption) error {
	type orderServiceExt interface {
		WantTicket(ctx context.Context, in *WantTicketReq, out *WantTicketRsp) error
		Ticket(ctx context.Context, in *TicketReq, out *TicketRsp) error
		PayOrder(ctx context.Context, in *PayOrderReq, out *PayOrderRsp) error
		UndoOrder(ctx context.Context, in *UndoOrderReq, out *UndoOrderRsp) error
		GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, out *GetOrderMessageRsp) error
		LookOrders(ctx context.Context, in *LookOrdersReq, out *LookOrdersRsp) error
		LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, out *LookAlreadyOrdersRsp) error
		OrderComment(ctx context.Context, in *OrderCommentReq, out *OrderCommentRsp) error
	}
	type OrderServiceExt struct {
		orderServiceExt
	}
	h := &orderServiceExtHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderServiceExt{h}, opts...))
}

type orderServiceExtHandler struct {
	OrderServiceExtHandler
}

func (h *orderServiceExtHandler) WantTicket(ctx context.Context, in *WantTicketReq, out *WantTicketRsp) error {
	return h.OrderServiceExtHandler.WantTicket(ctx, in, out)
}

func (h *orderServiceExtHandler) Ticket(ctx context.Context, in *TicketReq, out *TicketRsp) error {
	return h.OrderServiceExtHandler.Ticket(ctx, in, out)
}

func (h *orderServiceExtHandler) PayOrder(ctx context.Context, in *PayOrderReq, out *PayOrderRsp) error {
	return h.OrderServiceExtHandler.PayOrder(ctx, in, out)
}

func (h *orderServiceExtHandler) UndoOrder(ctx context.Context, in *UndoOrderReq, out *UndoOrderRsp) error {
	return h.OrderServiceExtHandler.UndoOrder(ctx, in, out)
}

func (h *orderServiceExtHandler) GetOrderMessage(ctx context.Context, in *GetOrderMessageReq, out *GetOrderMessageRsp) error {
	return h.OrderServiceExtHandler.GetOrderMessage(ctx, in, out)
}

func (h *orderServiceExtHandler) LookOrders(ctx context.Context, in *LookOrdersReq, out *LookOrdersRsp) error {
	return h.OrderServiceExtHandler.LookOrders(ctx, in, out)
}

func (h *orderServiceExtHandler) LookAlreadyOrders(ctx context.Context, in *LookAlreadyOrdersReq, out *LookAlreadyOrdersRsp) error {
	return h.OrderServiceExtHandler.LookAlreadyOrders(ctx, in, out)
}

func (h *orderServiceExtHandler) OrderComment(ctx context.Context, in *OrderCommentReq, out *OrderCommentRsp) error {
	return h.OrderServiceExtHandler.OrderComment(ctx, in, out)
}
