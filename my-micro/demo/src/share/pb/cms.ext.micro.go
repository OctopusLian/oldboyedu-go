// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cms.ext.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CMSServiceExt service

type CMSServiceExtService interface {
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginRsp, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...client.CallOption) (*UpdateMessageRsp, error)
	AllFilms(ctx context.Context, in *AllFilmsReq, opts ...client.CallOption) (*AllFilmsRsp, error)
	UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...client.CallOption) (*UpdateFilmRsp, error)
	DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...client.CallOption) (*DeleteFilmRsp, error)
	AllUsers(ctx context.Context, in *AllUsersReq, opts ...client.CallOption) (*AllUsersRsp, error)
	AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...client.CallOption) (*AllAdminUsersRsp, error)
	AllComments(ctx context.Context, in *AllCommentsReq, opts ...client.CallOption) (*AllCommentsRsp, error)
	AllOrders(ctx context.Context, in *AllOrdersReq, opts ...client.CallOption) (*AllOrdersRsp, error)
	AllAddress(ctx context.Context, in *AllAddressReq, opts ...client.CallOption) (*AllAddressRsp, error)
	AddFilm(ctx context.Context, in *AddFilmReq, opts ...client.CallOption) (*AddFilmRsp, error)
	AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...client.CallOption) (*AddAdminUserRsp, error)
	AddAddress(ctx context.Context, in *AddAddressReq, opts ...client.CallOption) (*AddAddressRsp, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...client.CallOption) (*UpdateAddressRsp, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...client.CallOption) (*DeleteAddressRsp, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...client.CallOption) (*DeleteAdminUserRsp, error)
	AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...client.CallOption) (*AllMovieHallRsp, error)
	AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...client.CallOption) (*AddMovieHallRsp, error)
	UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...client.CallOption) (*UpdateMovieHallRsp, error)
	DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...client.CallOption) (*DeleteMovieHallRsp, error)
	AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...client.CallOption) (*AllCinemaFilmsRsp, error)
	AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...client.CallOption) (*AddCinemaFilmRsp, error)
	UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...client.CallOption) (*UpdateCinemaFilmRsp, error)
	DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...client.CallOption) (*DeleteCinemaFilmRsp, error)
	RegisterCinema(ctx context.Context, in *RegisterCinemaReq, opts ...client.CallOption) (*RegisterCinemaRsp, error)
	AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, opts ...client.CallOption) (*AllCinemaHallRsp, error)
}

type cMSServiceExtService struct {
	c    client.Client
	name string
}

func NewCMSServiceExtService(name string, c client.Client) CMSServiceExtService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &cMSServiceExtService{
		c:    c,
		name: name,
	}
}

func (c *cMSServiceExtService) UserLogin(ctx context.Context, in *UserLoginReq, opts ...client.CallOption) (*UserLoginRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UserLogin", in)
	out := new(UserLoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) UpdateMessage(ctx context.Context, in *UpdateMessageReq, opts ...client.CallOption) (*UpdateMessageRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UpdateMessage", in)
	out := new(UpdateMessageRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllFilms(ctx context.Context, in *AllFilmsReq, opts ...client.CallOption) (*AllFilmsRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllFilms", in)
	out := new(AllFilmsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) UpdateFilm(ctx context.Context, in *UpdateFilmReq, opts ...client.CallOption) (*UpdateFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UpdateFilm", in)
	out := new(UpdateFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) DeleteFilm(ctx context.Context, in *DeleteFilmReq, opts ...client.CallOption) (*DeleteFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.DeleteFilm", in)
	out := new(DeleteFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllUsers(ctx context.Context, in *AllUsersReq, opts ...client.CallOption) (*AllUsersRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllUsers", in)
	out := new(AllUsersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, opts ...client.CallOption) (*AllAdminUsersRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllAdminUsers", in)
	out := new(AllAdminUsersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllComments(ctx context.Context, in *AllCommentsReq, opts ...client.CallOption) (*AllCommentsRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllComments", in)
	out := new(AllCommentsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllOrders(ctx context.Context, in *AllOrdersReq, opts ...client.CallOption) (*AllOrdersRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllOrders", in)
	out := new(AllOrdersRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllAddress(ctx context.Context, in *AllAddressReq, opts ...client.CallOption) (*AllAddressRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllAddress", in)
	out := new(AllAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AddFilm(ctx context.Context, in *AddFilmReq, opts ...client.CallOption) (*AddFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AddFilm", in)
	out := new(AddFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...client.CallOption) (*AddAdminUserRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AddAdminUser", in)
	out := new(AddAdminUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AddAddress(ctx context.Context, in *AddAddressReq, opts ...client.CallOption) (*AddAddressRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AddAddress", in)
	out := new(AddAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) UpdateAddress(ctx context.Context, in *UpdateAddressReq, opts ...client.CallOption) (*UpdateAddressRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UpdateAddress", in)
	out := new(UpdateAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) DeleteAddress(ctx context.Context, in *DeleteAddressReq, opts ...client.CallOption) (*DeleteAddressRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.DeleteAddress", in)
	out := new(DeleteAddressRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, opts ...client.CallOption) (*DeleteAdminUserRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.DeleteAdminUser", in)
	out := new(DeleteAdminUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllMovieHall(ctx context.Context, in *AllMovieHallReq, opts ...client.CallOption) (*AllMovieHallRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllMovieHall", in)
	out := new(AllMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AddMovieHall(ctx context.Context, in *AddMovieHallReq, opts ...client.CallOption) (*AddMovieHallRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AddMovieHall", in)
	out := new(AddMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, opts ...client.CallOption) (*UpdateMovieHallRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UpdateMovieHall", in)
	out := new(UpdateMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, opts ...client.CallOption) (*DeleteMovieHallRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.DeleteMovieHall", in)
	out := new(DeleteMovieHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, opts ...client.CallOption) (*AllCinemaFilmsRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllCinemaFilms", in)
	out := new(AllCinemaFilmsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, opts ...client.CallOption) (*AddCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AddCinemaFilm", in)
	out := new(AddCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, opts ...client.CallOption) (*UpdateCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.UpdateCinemaFilm", in)
	out := new(UpdateCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, opts ...client.CallOption) (*DeleteCinemaFilmRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.DeleteCinemaFilm", in)
	out := new(DeleteCinemaFilmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) RegisterCinema(ctx context.Context, in *RegisterCinemaReq, opts ...client.CallOption) (*RegisterCinemaRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.RegisterCinema", in)
	out := new(RegisterCinemaRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cMSServiceExtService) AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, opts ...client.CallOption) (*AllCinemaHallRsp, error) {
	req := c.c.NewRequest(c.name, "CMSServiceExt.AllCinemaHall", in)
	out := new(AllCinemaHallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CMSServiceExt service

type CMSServiceExtHandler interface {
	UserLogin(context.Context, *UserLoginReq, *UserLoginRsp) error
	UpdateMessage(context.Context, *UpdateMessageReq, *UpdateMessageRsp) error
	AllFilms(context.Context, *AllFilmsReq, *AllFilmsRsp) error
	UpdateFilm(context.Context, *UpdateFilmReq, *UpdateFilmRsp) error
	DeleteFilm(context.Context, *DeleteFilmReq, *DeleteFilmRsp) error
	AllUsers(context.Context, *AllUsersReq, *AllUsersRsp) error
	AllAdminUsers(context.Context, *AllAdminUsersReq, *AllAdminUsersRsp) error
	AllComments(context.Context, *AllCommentsReq, *AllCommentsRsp) error
	AllOrders(context.Context, *AllOrdersReq, *AllOrdersRsp) error
	AllAddress(context.Context, *AllAddressReq, *AllAddressRsp) error
	AddFilm(context.Context, *AddFilmReq, *AddFilmRsp) error
	AddAdminUser(context.Context, *AddAdminUserReq, *AddAdminUserRsp) error
	AddAddress(context.Context, *AddAddressReq, *AddAddressRsp) error
	UpdateAddress(context.Context, *UpdateAddressReq, *UpdateAddressRsp) error
	DeleteAddress(context.Context, *DeleteAddressReq, *DeleteAddressRsp) error
	DeleteAdminUser(context.Context, *DeleteAdminUserReq, *DeleteAdminUserRsp) error
	AllMovieHall(context.Context, *AllMovieHallReq, *AllMovieHallRsp) error
	AddMovieHall(context.Context, *AddMovieHallReq, *AddMovieHallRsp) error
	UpdateMovieHall(context.Context, *UpdateMovieHallReq, *UpdateMovieHallRsp) error
	DeleteMovieHall(context.Context, *DeleteMovieHallReq, *DeleteMovieHallRsp) error
	AllCinemaFilms(context.Context, *AllCinemaFilmsReq, *AllCinemaFilmsRsp) error
	AddCinemaFilm(context.Context, *AddCinemaFilmReq, *AddCinemaFilmRsp) error
	UpdateCinemaFilm(context.Context, *UpdateCinemaFilmReq, *UpdateCinemaFilmRsp) error
	DeleteCinemaFilm(context.Context, *DeleteCinemaFilmReq, *DeleteCinemaFilmRsp) error
	RegisterCinema(context.Context, *RegisterCinemaReq, *RegisterCinemaRsp) error
	AllCinemaHall(context.Context, *AllCinemaHallReq, *AllCinemaHallRsp) error
}

func RegisterCMSServiceExtHandler(s server.Server, hdlr CMSServiceExtHandler, opts ...server.HandlerOption) error {
	type cMSServiceExt interface {
		UserLogin(ctx context.Context, in *UserLoginReq, out *UserLoginRsp) error
		UpdateMessage(ctx context.Context, in *UpdateMessageReq, out *UpdateMessageRsp) error
		AllFilms(ctx context.Context, in *AllFilmsReq, out *AllFilmsRsp) error
		UpdateFilm(ctx context.Context, in *UpdateFilmReq, out *UpdateFilmRsp) error
		DeleteFilm(ctx context.Context, in *DeleteFilmReq, out *DeleteFilmRsp) error
		AllUsers(ctx context.Context, in *AllUsersReq, out *AllUsersRsp) error
		AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, out *AllAdminUsersRsp) error
		AllComments(ctx context.Context, in *AllCommentsReq, out *AllCommentsRsp) error
		AllOrders(ctx context.Context, in *AllOrdersReq, out *AllOrdersRsp) error
		AllAddress(ctx context.Context, in *AllAddressReq, out *AllAddressRsp) error
		AddFilm(ctx context.Context, in *AddFilmReq, out *AddFilmRsp) error
		AddAdminUser(ctx context.Context, in *AddAdminUserReq, out *AddAdminUserRsp) error
		AddAddress(ctx context.Context, in *AddAddressReq, out *AddAddressRsp) error
		UpdateAddress(ctx context.Context, in *UpdateAddressReq, out *UpdateAddressRsp) error
		DeleteAddress(ctx context.Context, in *DeleteAddressReq, out *DeleteAddressRsp) error
		DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, out *DeleteAdminUserRsp) error
		AllMovieHall(ctx context.Context, in *AllMovieHallReq, out *AllMovieHallRsp) error
		AddMovieHall(ctx context.Context, in *AddMovieHallReq, out *AddMovieHallRsp) error
		UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, out *UpdateMovieHallRsp) error
		DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, out *DeleteMovieHallRsp) error
		AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, out *AllCinemaFilmsRsp) error
		AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, out *AddCinemaFilmRsp) error
		UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, out *UpdateCinemaFilmRsp) error
		DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, out *DeleteCinemaFilmRsp) error
		RegisterCinema(ctx context.Context, in *RegisterCinemaReq, out *RegisterCinemaRsp) error
		AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, out *AllCinemaHallRsp) error
	}
	type CMSServiceExt struct {
		cMSServiceExt
	}
	h := &cMSServiceExtHandler{hdlr}
	return s.Handle(s.NewHandler(&CMSServiceExt{h}, opts...))
}

type cMSServiceExtHandler struct {
	CMSServiceExtHandler
}

func (h *cMSServiceExtHandler) UserLogin(ctx context.Context, in *UserLoginReq, out *UserLoginRsp) error {
	return h.CMSServiceExtHandler.UserLogin(ctx, in, out)
}

func (h *cMSServiceExtHandler) UpdateMessage(ctx context.Context, in *UpdateMessageReq, out *UpdateMessageRsp) error {
	return h.CMSServiceExtHandler.UpdateMessage(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllFilms(ctx context.Context, in *AllFilmsReq, out *AllFilmsRsp) error {
	return h.CMSServiceExtHandler.AllFilms(ctx, in, out)
}

func (h *cMSServiceExtHandler) UpdateFilm(ctx context.Context, in *UpdateFilmReq, out *UpdateFilmRsp) error {
	return h.CMSServiceExtHandler.UpdateFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) DeleteFilm(ctx context.Context, in *DeleteFilmReq, out *DeleteFilmRsp) error {
	return h.CMSServiceExtHandler.DeleteFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllUsers(ctx context.Context, in *AllUsersReq, out *AllUsersRsp) error {
	return h.CMSServiceExtHandler.AllUsers(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllAdminUsers(ctx context.Context, in *AllAdminUsersReq, out *AllAdminUsersRsp) error {
	return h.CMSServiceExtHandler.AllAdminUsers(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllComments(ctx context.Context, in *AllCommentsReq, out *AllCommentsRsp) error {
	return h.CMSServiceExtHandler.AllComments(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllOrders(ctx context.Context, in *AllOrdersReq, out *AllOrdersRsp) error {
	return h.CMSServiceExtHandler.AllOrders(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllAddress(ctx context.Context, in *AllAddressReq, out *AllAddressRsp) error {
	return h.CMSServiceExtHandler.AllAddress(ctx, in, out)
}

func (h *cMSServiceExtHandler) AddFilm(ctx context.Context, in *AddFilmReq, out *AddFilmRsp) error {
	return h.CMSServiceExtHandler.AddFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) AddAdminUser(ctx context.Context, in *AddAdminUserReq, out *AddAdminUserRsp) error {
	return h.CMSServiceExtHandler.AddAdminUser(ctx, in, out)
}

func (h *cMSServiceExtHandler) AddAddress(ctx context.Context, in *AddAddressReq, out *AddAddressRsp) error {
	return h.CMSServiceExtHandler.AddAddress(ctx, in, out)
}

func (h *cMSServiceExtHandler) UpdateAddress(ctx context.Context, in *UpdateAddressReq, out *UpdateAddressRsp) error {
	return h.CMSServiceExtHandler.UpdateAddress(ctx, in, out)
}

func (h *cMSServiceExtHandler) DeleteAddress(ctx context.Context, in *DeleteAddressReq, out *DeleteAddressRsp) error {
	return h.CMSServiceExtHandler.DeleteAddress(ctx, in, out)
}

func (h *cMSServiceExtHandler) DeleteAdminUser(ctx context.Context, in *DeleteAdminUserReq, out *DeleteAdminUserRsp) error {
	return h.CMSServiceExtHandler.DeleteAdminUser(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllMovieHall(ctx context.Context, in *AllMovieHallReq, out *AllMovieHallRsp) error {
	return h.CMSServiceExtHandler.AllMovieHall(ctx, in, out)
}

func (h *cMSServiceExtHandler) AddMovieHall(ctx context.Context, in *AddMovieHallReq, out *AddMovieHallRsp) error {
	return h.CMSServiceExtHandler.AddMovieHall(ctx, in, out)
}

func (h *cMSServiceExtHandler) UpdateMovieHall(ctx context.Context, in *UpdateMovieHallReq, out *UpdateMovieHallRsp) error {
	return h.CMSServiceExtHandler.UpdateMovieHall(ctx, in, out)
}

func (h *cMSServiceExtHandler) DeleteMovieHall(ctx context.Context, in *DeleteMovieHallReq, out *DeleteMovieHallRsp) error {
	return h.CMSServiceExtHandler.DeleteMovieHall(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllCinemaFilms(ctx context.Context, in *AllCinemaFilmsReq, out *AllCinemaFilmsRsp) error {
	return h.CMSServiceExtHandler.AllCinemaFilms(ctx, in, out)
}

func (h *cMSServiceExtHandler) AddCinemaFilm(ctx context.Context, in *AddCinemaFilmReq, out *AddCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.AddCinemaFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) UpdateCinemaFilm(ctx context.Context, in *UpdateCinemaFilmReq, out *UpdateCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.UpdateCinemaFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) DeleteCinemaFilm(ctx context.Context, in *DeleteCinemaFilmReq, out *DeleteCinemaFilmRsp) error {
	return h.CMSServiceExtHandler.DeleteCinemaFilm(ctx, in, out)
}

func (h *cMSServiceExtHandler) RegisterCinema(ctx context.Context, in *RegisterCinemaReq, out *RegisterCinemaRsp) error {
	return h.CMSServiceExtHandler.RegisterCinema(ctx, in, out)
}

func (h *cMSServiceExtHandler) AllCinemaHall(ctx context.Context, in *AllCinemaHallReq, out *AllCinemaHallRsp) error {
	return h.CMSServiceExtHandler.AllCinemaHall(ctx, in, out)
}
